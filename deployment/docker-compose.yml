version: "3.3"
services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.4.0
    container_name: elasticsearch
    environment:
      - xpack.security.enabled=false
      - "discovery.type=single-node"
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - kafkanet

  # Kafka Server & Zookeeper Docker Image
  kafkaserver:
    image: "spotify/kafka:latest"
    container_name: kafka
    restart: always
    hostname: kafkaserver
    networks:
      - kafkanet
    ports:
      - 2181:2181
      - 9092:9092
    environment:
      ADVERTISED_HOST: kafkaserver
      ADVERTISED_PORT: 9092
      KAFKA_CREATE_TOPICS: "uat.catalogue.item, server.error"

  kibana:
    image: docker.elastic.co/kibana/kibana:6.4.0
    container_name: kibana
    ports:
      - 5601:5601
    environment: 
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    links:
      - elasticsearch:elasticsearch
    networks:
      - kafkanet
    depends_on: [ 'elasticsearch' ]

  logstash:
    image: docker.elastic.co/logstash/logstash:6.4.0
    container_name: logstash
    links:
      - elasticsearch:elasticsearch
      - kafkaserver:kafkaserver
    networks:
      - kafkanet
    depends_on: [ 'elasticsearch', 'kafkaserver' ]
    volumes:
      - './conf:/usr/share/logstash/pipeline/'

  postgres:
    container_name: postgres
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: admin@111
      POSTGRES_PASSWORD: admin@111
      POSTGRES_DB: maindb
    ports:
      - "5432:5432"
    networks:
      - main-network

  api:
    container_name: api
    image: node:18.16.0
    restart: always
    depends_on:
      - postgres
    command:
      - sh
      - -c
      - "cd /usr/src/api && npm install && npx nx run interated:serve:development"
    env_file:
      - ../api-gen-no-code/.env
    environment:
      - PATH=/usr/src/api/node_modules/.bin:$PATH
      - DATABASE_HOST_NAME=postgres
      - DATABASE_PORT=5432
      - DATABASE_USERNAME=admin@111
      - DATABASE_PASSWORD=admin@111
      - DATABASE_SCHEMA=maindb
      - DATABASE_TYPE=postgres
      - SERVER_SECRET_KEY=kqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCS9

    volumes:
      - ../api-gen-no-code:/usr/src/api
      - ../api-gen-no-code/node_modules:/usr/src/api/node_modules
    links:
      - kafkaserver:kafkaserver
    ports:
      - 3000:3000

    networks:
      - kafkanet
      - main-network
  # web:
  #   container_name: web
  #   image: node:18.16.0
  #   restart: always
  #   environment:
  #     - PATH=/usr/src/web/node_modules/.bin:$PATH
  #   command:
  #     - sh
  #     - -c
  #     - "cd /usr/src/web && npm install && ng serve --host 0.0.0.0 --port 4200"
  #   volumes:
  #     - ../web-gen-no-code:/usr/src/web
  #     - ../web-gen-no-code/node_modules:/usr/src/web/node_modules
  #   ports:
  #     - 4200:4200
  #   networks:
  #     - main-network
  sonarqube:
    image: sonarqube:latest
    container_name: sonarqube
    ports:
      - "9000:9000"
    environment:
      - SONARQUBE_JDBC_URL=jdbc:postgresql://sonarqube-db:5432/sonar
      - SONARQUBE_JDBC_USERNAME=sonar
      - SONARQUBE_JDBC_PASSWORD=sonar
    networks:
      - dev_network
    depends_on:
      - sonarqube-db
  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins
    ports:
      - "8080:8080"
    volumes:
      - jenkins_home:/var/jenkins_home
    networks:
      - dev_network
  
  sonarqube-db:
    image: postgres:alpine
    container_name: sonarqube-db
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - POSTGRES_DB=sonar
    networks:
      - dev_network
    volumes:
      - sonarqube-db:/var/lib/postgresql/data

networks:
  kafkanet:
    driver: bridge
  main-network:
    driver: bridge
  dev_network:
    driver: bridge

volumes:
  jenkins_home:
  sonarqube-db:

# ./bin/elasticsearch-reset-password -u elastic -i --url https://localhost:9200
# elasticsearch-create-enrollment-token --scope kibana --url https://localhost:9200/
# docker exec -it a259747181ee sh  kibana-verification-code

# grep vm.max_map_count /etc/sysctl.conf
# sudo sysctl -w vm.max_map_count=262144